//! Trading Modes Module
//! 
//! This module contains all trading mode implementations that can be used with different
//! trading strategies. Trading modes define how a strategy interacts with market data
//! and executes trades in different environments.
//! 
//! ## Available Trading Modes
//! 
//! - **Core**: Base traits and types for trading modes
//! - **Backtest**: Historical simulation using past market data
//! - **Paper Trade**: Live simulation with real-time data but no actual trades
//! 
//! ## Architecture
//! 
//! The trading modes are built around a common `TradingMode` trait that allows for
//! pluggable implementations. Each mode can consume features from Kafka streams
//! and generate trading signals.
//! 
//! ### Key Components
//! 
//! - `TradingMode` trait: Common interface for all trading modes
//! - `TradingModeRunner`: Kafka-based runner that coordinates feature consumption and signal generation
//! - `Feature`: Market data and indicators consumed from Kafka
//! - `Signal`: Trading signals generated by strategies
//! 
//! ## Usage
//! 
//! ```rust
//! use trading_modes::{TradingModeRunner, KafkaConfig};
//! use trading_modes::backtest::BacktestTradingMode;
//! 
//! let trading_mode = BacktestTradingMode::new(
//!     Box::new(|capital| MyStrategy::new(capital)),
//!     config,
//! );
//! 
//! let mut runner = TradingModeRunner::new(
//!     kafka_config,
//!     Box::new(trading_mode),
//! )?;
//! 
//! runner.start().await?;
//! ```

pub mod trading_mode;
pub mod backtest;
pub mod paper_trade;

// Re-export commonly used types
pub use trading_mode::{
    TradingMode, TradingModeRunner, KafkaHandler, KafkaConfig,
    Feature, Signal, SignalType
};
pub use backtest::BacktestTradingMode;
pub use paper_trade::PaperTradingMode;